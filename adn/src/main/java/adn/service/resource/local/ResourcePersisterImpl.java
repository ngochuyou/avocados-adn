/**
 * 
 */
package adn.service.resource.local;

import java.io.Serializable;
import java.lang.reflect.Field;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import java.util.stream.Stream;

import javax.persistence.metamodel.Attribute;
import javax.persistence.metamodel.SingularAttribute;

import org.hibernate.HibernateException;
import org.hibernate.LockMode;
import org.hibernate.LockOptions;
import org.hibernate.MappingException;
import org.hibernate.bytecode.spi.BytecodeEnhancementMetadata;
import org.hibernate.dialect.lock.LockingStrategy;
import org.hibernate.engine.internal.MutableEntityEntryFactory;
import org.hibernate.engine.spi.CascadeStyle;
import org.hibernate.engine.spi.EntityEntryFactory;
import org.hibernate.engine.spi.SessionFactoryImplementor;
import org.hibernate.engine.spi.SharedSessionContractImplementor;
import org.hibernate.engine.spi.ValueInclusion;
import org.hibernate.id.IdentifierGenerator;
import org.hibernate.internal.FilterAliasGenerator;
import org.hibernate.internal.util.collections.ArrayHelper;
import org.hibernate.loader.entity.UniqueEntityLoader;
import org.hibernate.metadata.ClassMetadata;
import org.hibernate.persister.entity.Loadable;
import org.hibernate.persister.entity.Lockable;
import org.hibernate.persister.entity.MultiLoadOptions;
import org.hibernate.persister.walking.spi.AttributeDefinition;
import org.hibernate.persister.walking.spi.EntityIdentifierDefinition;
import org.hibernate.property.access.spi.PropertyAccess;
import org.hibernate.tuple.GenerationTiming;
import org.hibernate.tuple.Instantiator;
import org.hibernate.tuple.PojoInstantiator;
import org.hibernate.tuple.ValueGeneration;
import org.hibernate.type.Type;
import org.hibernate.type.VersionType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.SpringApplication;
import org.springframework.util.Assert;

import adn.application.context.ContextProvider;
import adn.service.resource.metamodel.CentricAttributeContext;
import adn.service.resource.metamodel.EntityBinder;
import adn.service.resource.metamodel.EntityPersisterImplementor;
import adn.service.resource.metamodel.EntityTuplizerImplementor;
import adn.service.resource.metamodel.MetamodelImpl;
import adn.service.resource.metamodel.MetamodelImpl.IdentifierGenerationHolder;
import adn.service.resource.metamodel.MetamodelImpl.NoValueGeneration;
import adn.service.resource.metamodel.PropertyBinder;
import adn.service.resource.metamodel.ResourceType;

/**
 * @author Ngoc Huy
 *
 */
public class ResourcePersisterImpl<D> implements ResourcePersister<D>, EntityPersisterImplementor<D>, ClassMetadata,
		SharedSessionUnwrapper, Lockable, Loadable {

	private final Logger logger = LoggerFactory.getLogger(MetamodelImpl.class);

	private final ResourceManagerFactory managerFactory;
	private final ResourceType<D> metamodel;

	private String entityName;
	private Class<D> mappedClass;

	private PropertyAccess identifierAccess;
	private IdentifierGenerator identifierGenerator;

	private int propertySpan;
	private final Map<String, Integer> indexMap = new HashMap<>();
	private PropertyAccess[] propertyAccesses;
	private Type[] propertyTypes;
	private ValueGeneration[] valueGenerations;
	private boolean[] autoGeneratedMarkers;
	private boolean[] propertyNullabilities;
	private boolean[] propertyUpdatabilities;
	private Instantiator instantiator;
	// Every resource instances is mutable
	private final EntityEntryFactory entryFactory = ResourceEntryFactory.INSTANCE;

	private final Map<LockMode, LockingStrategy> lockingStrategyMap = new HashMap<>();

	private UniqueEntityLoader resourceLoader;

	public ResourcePersisterImpl(ResourceManagerFactory managerFactory, ResourceType<D> metamodel) {
		// TODO Auto-generated constructor stub
		Assert.notNull(managerFactory, "ResourceManagerFactory must not be null");
		Assert.notNull(metamodel, "EntityTypeImpl must not be null");
		this.managerFactory = managerFactory;
		this.metamodel = metamodel;
	}

	@Override
	public void generateEntityDefinition() {
		// TODO Auto-generated method stub
		mappedClass = metamodel.getJavaType();
		logger.trace("Generating entity definition of type " + mappedClass.getName());
		entityName = metamodel.getName();
		propertySpan = determinePropertySpan(metamodel);
		propertyAccesses = new PropertyAccess[propertySpan];
		valueGenerations = new ValueGeneration[propertySpan];
		propertyTypes = new Type[propertySpan];
		autoGeneratedMarkers = new boolean[propertySpan];
		propertyNullabilities = new boolean[propertySpan];
		propertyUpdatabilities = new boolean[propertySpan];
		instantiator = new PojoInstantiator(metamodel.getJavaType(), null);

		@SuppressWarnings("unchecked")
		Attribute<D, ?>[] attributes = metamodel.getAttributes().toArray(Attribute[]::new);
		CentricAttributeContext attributeContext = managerFactory.getContextBuildingService()
				.getService(CentricAttributeContext.class);

		Assert.notNull(attributeContext, "Unable to locate CentricAttributeContext");

		for (int i = 0; i < propertySpan; i++) {
			Attribute<D, ?> attr = attributes[i];

			indexMap.put(attr.getName(), i);

			ValueGeneration delegateGeneration;

			if (!attr.getDeclaringType().equals(metamodel)) {
				logger.trace(
						String.format("%s.%s: locating metadata from super type", metamodel.getName(), attr.getName()));
				propertyAccesses[i] = locatePropertyAccess(attr.getName());
				valueGenerations[i] = (delegateGeneration = locateValueGeneration(attr.getName()));
				propertyTypes[i] = locatePropertyType(attr.getName());
			} else {
				propertyAccesses[i] = PropertyBinder.INSTANCE.createPropertyAccess(mappedClass, attr.getName());
				valueGenerations[i] = (delegateGeneration = PropertyBinder.INSTANCE.resolveValueGeneration(metamodel,
						attr));
				propertyTypes[i] = attributeContext.resolveType(metamodel, attr);
			}

			propertyNullabilities[i] = attr instanceof SingularAttribute
					? ((SingularAttribute<? super D, ?>) attr).isOptional()
					: Optional
							.ofNullable(attr.getJavaMember() instanceof Field
									? PropertyBinder.INSTANCE.isOptional((Field) attr.getJavaMember())
									: null)
							.orElseThrow(
									() -> new IllegalArgumentException("Unable to determine nullability of attribute "
											+ attr.getName() + ", javatype " + attr.getJavaType()));
			propertyUpdatabilities[i] = attr.getJavaMember() instanceof Field
					? PropertyBinder.INSTANCE.isUpdatable((Field) attr.getJavaMember())
					: true;
			logger.trace(String.format(
					"Located valuegeneration of attribute %s. GenerationTiming %s. ValueGenerator %s", attr.getName(),
					delegateGeneration == IdentifierGenerationHolder.INSTANCE ? "determined by IdentifierGenerator"
							: delegateGeneration.getGenerationTiming(),
					delegateGeneration.getValueGenerator() != null
							? delegateGeneration.getValueGenerator().getClass().getName()
							: delegateGeneration == IdentifierGenerationHolder.INSTANCE
									? "determined by IdentifierGenerator"
									: "NULL"));
			autoGeneratedMarkers[i] = (delegateGeneration != NoValueGeneration.INSTANCE);
		}

		if (!metamodel.hasSingleIdAttribute()) {
			ResourceType<? super D> root = metamodel;

			while (root.hasSingleIdAttribute() == false) {
				root = root.locateSuperType();
			}

			if (root == null || root.getName() == metamodel.getName()) {
				throw new IllegalArgumentException("Unable to locate identifier access for type " + entityName);
			}

			identifierAccess = managerFactory.getResourcePersister(root.getName())
					.getPropertyAccess(getIdentifierPropertyName());
		} else {
			identifierAccess = propertyAccesses[indexMap
					.get(metamodel.getId(metamodel.getIdType().getJavaType()).getName())];
			try {
				identifierGenerator = EntityBinder.INSTANCE.locateIdentifierGenerator(metamodel, managerFactory);
			} catch (IllegalAccessException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
				SpringApplication.exit(ContextProvider.getApplicationContext());
			}
		}

		resourceLoader = new ResourceLoader(this);
	}

	private int determinePropertySpan(ResourceType<? super D> metamodel) {
		if (metamodel.getSupertype() == null) {
			return metamodel.getDeclaredAttributes().size();
		}

		return metamodel.getDeclaredAttributes().size() + determinePropertySpan(metamodel.locateSuperType());
	}

	private LockingStrategy createLockingStrategy(LockMode lockMode) {
		return managerFactory.getDialect().getLockingStrategy(this, lockMode);
	}

	@Override
	public void postInstantiate() throws MappingException {
		// TODO Auto-generated method stub
		logger.trace("Finished instantiating ResourcePersister for resource named " + getEntityName());
	}

	@Override
	public EntityEntryFactory getEntityEntryFactory() {
		// TODO Auto-generated method stub
		return entryFactory;
	}

	@Override
	public String getRootEntityName() {
		// TODO Auto-generated method stub
		return metamodel.locateRootType().getName();
	}

	@Override
	public String getEntityName() {
		// TODO Auto-generated method stub
		return entityName;
	}

	@Override
	public boolean isSubclassEntityName(String entityName) {
		// TODO Auto-generated method stub
		return metamodel.getSubclassNames().contains(entityName);
	}

	@Override
	public Serializable[] getPropertySpaces() {
		// TODO Auto-generated method stub
		return new Serializable[0];
	}

	@Override
	public Serializable[] getQuerySpaces() {
		// TODO Auto-generated method stub
		return new Serializable[0];
	}

	@Override
	public boolean hasProxy() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean hasCollections() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean hasMutableProperties() {
		// TODO Auto-generated method stub
		return IntStream.range(0, propertySpan).mapToObj(index -> propertyUpdatabilities[index])
				.filter(pred -> pred == true).count() > 0;
	}

	@Override
	public boolean hasSubselectLoadableCollections() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean hasCascades() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean isMutable() {
		// TODO Auto-generated method stub
		return entryFactory.getClass().equals(MutableEntityEntryFactory.class);
	}

	@Override
	public boolean isInherited() {
		// TODO Auto-generated method stub
		return metamodel.getSuperType() != null;
	}

	@Override
	public boolean isIdentifierAssignedByInsert() {
		// TODO Auto-generated method stub
		return identifierGenerator != null && getValueGeneration(metamodel.locateIdAttribute().getName())
				.getGenerationTiming() == GenerationTiming.INSERT;
	}

	@Override
	public Type getPropertyType(String propertyName) throws MappingException {
		// TODO Auto-generated method stub
		return propertyTypes[indexMap.get(propertyName)];
	}

	@Override
	public Type locatePropertyType(String properyName) {
		// TODO Auto-generated method stub
		Type candidate = getPropertyType(properyName);

		if (candidate != null) {
			return candidate;
		}

		return managerFactory.getMetamodel().entityPersister(metamodel.locateSuperType().getName())
				.locatePropertyType(properyName);
	}

	@Override
	public int[] findDirty(Object[] currentState, Object[] previousState, Object owner,
			SharedSessionContractImplementor session) {
		// TODO Auto-generated method stub
		int[] indices = null;
		int count = 0;

		for (int i = 0; i < propertySpan; i++) {
			if (propertyTypes[i].isDirty(previousState[i], currentState[i], session)) {
				indices = nullableGet(indices, count, i);
			}
		}

		return indices == null ? null : ArrayHelper.trim(indices, count);
	}

	private int[] nullableGet(int[] indices, int index, int val) {
		if (indices == null) {
			indices = new int[propertySpan];

			indices[0] = val;

			return indices;
		}

		indices[index] = val;

		return indices;
	}

	@Override
	public int[] findModified(Object[] old, Object[] current, Object object, SharedSessionContractImplementor session) {
		// TODO Auto-generated method stub
		return findDirty(current, current, object, session);
	}

	@Override
	public boolean hasIdentifierProperty() {
		// TODO Auto-generated method stub
		return metamodel.hasSingleIdAttribute();
	}

	@Override
	public boolean canExtractIdOutOfEntity() {
		// TODO Auto-generated method stub
		return identifierAccess != null;
	}

	@Override
	public boolean isVersioned() {
		// TODO Auto-generated method stub
		return metamodel.hasVersionAttribute();
	}

	@Override
	public VersionType<?> getVersionType() {
		// TODO Auto-generated method stub
		if (!isVersioned()) {
			return null;
		}

		Type candidate = propertyTypes[indexMap.get(metamodel.locateVersionAttribute().getName())];

		if (candidate instanceof VersionType) {
			return (VersionType<?>) candidate;
		}

		throw new IllegalArgumentException("Unable to locate VersionType");
	}

	@Override
	public int getVersionProperty() {
		// TODO Auto-generated method stub
		return indexMap.get(metamodel.locateVersionAttribute().getName());
	}

	@Override
	public boolean hasNaturalIdentifier() {
		// TODO Auto-generated method stub
		return identifierGenerator == null;
	}

	@Override
	public int[] getNaturalIdentifierProperties() {
		// TODO Auto-generated method stub
		if (!hasNaturalIdentifier()) {
			return null;
		}

		return new int[] { indexMap.get(metamodel.locateIdAttribute().getName()) };
	}

	@Override
	public Object[] getNaturalIdentifierSnapshot(Serializable id, SharedSessionContractImplementor session) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public IdentifierGenerator getIdentifierGenerator() {
		// TODO Auto-generated method stub
		return identifierGenerator;
	}

	@Override
	public boolean hasLazyProperties() {
		// TODO Auto-generated method stub
		return false;
	}

	private void assertNaturalId(Object[] values) {
		Assert.isTrue(values.length == 1, "Plural value id is not supported");
		Assert.isTrue(values[0] instanceof Serializable, "Natural id value must be Serializable");
	}

	@Override
	public Serializable loadEntityIdByNaturalId(Object[] naturalIdValues, LockOptions lockOptions,
			SharedSessionContractImplementor session) {
		// TODO Auto-generated method stub
		assertNaturalId(naturalIdValues);
		// directly load from storage
		Object instance = getManagerFactory().getStorage().select((Serializable) naturalIdValues[0]);

		if (instance == null) {
			return null;
		}

		return (Serializable) getIdentifierType().resolve(getIdentifier(instance), session, instance);
	}

	@Override
	public Object load(Serializable id, Object optionalObject, LockMode lockMode,
			SharedSessionContractImplementor session) throws HibernateException {
		// TODO Auto-generated method stub
		return load(id, optionalObject, new LockOptions().setLockMode(lockMode), null);
	}

	@Override
	public Object load(Serializable id, Object optionalObject, LockOptions lockOptions,
			SharedSessionContractImplementor session) throws HibernateException {
		// TODO Auto-generated method stub
		return resourceLoader.load(id, null, session, lockOptions);
	}

	@Override
	public List<?> multiLoad(Serializable[] ids, SharedSessionContractImplementor session,
			MultiLoadOptions loadOptions) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void lock(Serializable id, Object version, Object object, LockMode lockMode,
			SharedSessionContractImplementor session) throws HibernateException {
		// TODO Auto-generated method stub
		locateLockingStrategy(lockMode).lock(id, version, object, LockOptions.WAIT_FOREVER, session);
	}

	@Override
	public void lock(Serializable id, Object version, Object object, LockOptions lockOptions,
			SharedSessionContractImplementor session) throws HibernateException {
		// TODO Auto-generated method stub
		locateLockingStrategy(lockOptions.getLockMode()).lock(id, version, object, lockOptions.getTimeOut(), session);
	}

	private LockingStrategy locateLockingStrategy(LockMode lockMode) {
		return lockingStrategyMap.computeIfAbsent(lockMode, this::createLockingStrategy);
	}

	@Override
	public void insert(Serializable id, Object[] fields, Object object, SharedSessionContractImplementor session)
			throws HibernateException {
		// TODO Auto-generated method stub

	}

	@Override
	public Serializable insert(Object[] fields, Object object, SharedSessionContractImplementor session)
			throws HibernateException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void delete(Serializable id, Object version, Object object, SharedSessionContractImplementor session)
			throws HibernateException {
		// TODO Auto-generated method stub

	}

	@Override
	public void update(Serializable id, Object[] fields, int[] dirtyFields, boolean hasDirtyCollection,
			Object[] oldFields, Object oldVersion, Object object, Object rowId,
			SharedSessionContractImplementor session) throws HibernateException {
		// TODO Auto-generated method stub
	}

	@Override
	public Type[] getPropertyTypes() {
		// TODO Auto-generated method stub
		return propertyTypes;
	}

	@Override
	public String[] getPropertyNames() {
		// TODO Auto-generated method stub
		return indexMap.keySet().toArray(String[]::new);
	}

	@Override
	public boolean[] getPropertyInsertability() {
		// TODO Auto-generated method stub
		boolean[] arr = new boolean[propertySpan];

		Arrays.fill(arr, true);

		return arr;
	}

	@Override
	public ValueInclusion[] getPropertyInsertGenerationInclusions() {
		// TODO Auto-generated method stub
		ValueInclusion[] arr = new ValueInclusion[propertySpan];

		Arrays.fill(arr, ValueInclusion.FULL);

		return arr;
	}

	@Override
	public ValueInclusion[] getPropertyUpdateGenerationInclusions() {
		// TODO Auto-generated method stub
		return Stream.of(valueGenerations)
				.map(vg -> vg != NoValueGeneration.INSTANCE && vg.getGenerationTiming().equals(GenerationTiming.ALWAYS)
						? ValueInclusion.FULL
						: ValueInclusion.NONE)
				.toArray(ValueInclusion[]::new);
	}

	@Override
	public boolean[] getPropertyUpdateability() {
		// TODO Auto-generated method stub
		return propertyUpdatabilities;
	}

	@Override
	public boolean[] getPropertyCheckability() {
		// TODO Auto-generated method stub
		boolean[] arr = new boolean[propertySpan];

		Arrays.fill(arr, true);

		return arr;
	}

	@Override
	public boolean[] getPropertyNullability() {
		// TODO Auto-generated method stub
		return propertyNullabilities;
	}

	@Override
	public boolean[] getPropertyVersionability() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean[] getPropertyLaziness() {
		// TODO Auto-generated method stub
		boolean[] arr = new boolean[propertySpan];

		Arrays.fill(arr, false);

		return arr;
	}

	@Override
	public CascadeStyle[] getPropertyCascadeStyles() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Type getIdentifierType() {
		// TODO Auto-generated method stub
		if (!hasIdentifierProperty()) {
			return locateSuperPersister().getIdentifierType();
		}

		return propertyTypes[indexMap.get(getIdentifierPropertyName())];
	}

	@SuppressWarnings("unchecked")
	private ResourcePersister<? super D> locateSuperPersister() {
		if (metamodel.getSupertype() != null) {
			return (ResourcePersister<? super D>) managerFactory.getMetamodel()
					.locateEntityPersister(metamodel.locateSuperType().getName());
		}

		return null;
	}

	@Override
	public String getIdentifierPropertyName() {
		// TODO Auto-generated method stub
		if (!hasIdentifierProperty()) {
			return metamodel.getSuperType() == null ? null
					: managerFactory.getResourcePersister(metamodel.locateSuperType().getName())
							.getIdentifierPropertyName();
		}

		return metamodel.locateIdAttribute().getName();
	}

	@Override
	public ClassMetadata getClassMetadata() {
		// TODO Auto-generated method stub
		return this;
	}

	@Override
	public boolean isBatchLoadable() {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	public boolean isSelectBeforeUpdateRequired() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Object[] getDatabaseSnapshot(Serializable id, SharedSessionContractImplementor session)
			throws HibernateException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Serializable getIdByUniqueKey(Serializable key, String uniquePropertyName,
			SharedSessionContractImplementor session) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Object getCurrentVersion(Serializable id, SharedSessionContractImplementor session)
			throws HibernateException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Object forceVersionIncrement(Serializable id, Object currentVersion,
			SharedSessionContractImplementor session) throws HibernateException {
		// TODO Auto-generated method stub
		return valueGenerations[getVersionProperty()].getGenerationTiming() == GenerationTiming.ALWAYS;
	}

	@Override
	public boolean isInstrumented() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean hasInsertGeneratedProperties() {
		// TODO Auto-generated method stub
		return Stream.of(valueGenerations).filter(vg -> vg.getGenerationTiming() == GenerationTiming.INSERT)
				.count() != 0;
	}

	@Override
	public boolean hasUpdateGeneratedProperties() {
		// TODO Auto-generated method stub
		return Stream.of(valueGenerations).filter(vg -> vg.getGenerationTiming() == GenerationTiming.ALWAYS)
				.count() != 0;
	}

	@Override
	public boolean isVersionPropertyGenerated() {
		// TODO Auto-generated method stub
		return valueGenerations[getVersionProperty()] != NoValueGeneration.INSTANCE;
	}

	@Override
	public void afterInitialize(Object entity, SharedSessionContractImplementor session) {
		// TODO Auto-generated method stub
	}

	@Override
	public void afterReassociate(Object entity, SharedSessionContractImplementor session) {
		// TODO Auto-generated method stub

	}

	@Override
	public Object createProxy(Serializable id, SharedSessionContractImplementor session) throws HibernateException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Boolean isTransient(Object object, SharedSessionContractImplementor session) throws HibernateException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Object[] getPropertyValuesToInsert(Object object, @SuppressWarnings("rawtypes") Map mergeMap,
			SharedSessionContractImplementor session) throws HibernateException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void processInsertGeneratedProperties(Serializable id, Object entity, Object[] state,
			SharedSessionContractImplementor session) {
		// TODO Auto-generated method stub

	}

	@Override
	public void processUpdateGeneratedProperties(Serializable id, Object entity, Object[] state,
			SharedSessionContractImplementor session) {
		// TODO Auto-generated method stub

	}

	@Override
	public Class<D> getMappedClass() {
		// TODO Auto-generated method stub
		return mappedClass;
	}

	@Override
	public boolean implementsLifecycle() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Class<?> getConcreteProxyClass() {
		// TODO Auto-generated method stub
		return mappedClass;
	}

	private void assertInput(Object[] values) {
		Assert.isTrue(values.length == propertySpan, "Input values length and property span must match");
	}

	@Override
	public void setPropertyValues(Object object, Object[] values) {
		// TODO Auto-generated method stub
		assertInput(values);

		for (int i = 0; i < propertySpan; i++) {
			setPropertyValue(object, i, values[i]);
		}
	}

	private void assertIndex(int i) {
		Assert.isTrue(i < propertySpan, "Index exceeded");
	}

	private void assertValue(int i, Object value) {
		assertIndex(i);
		Assert.isTrue(
				propertyTypes[i].getReturnedClass() == value.getClass()
						|| value.getClass().isAssignableFrom(propertyTypes[i].getReturnedClass()),
				"Value type and returned type must match");
	}

	@Override
	public void setPropertyValue(Object object, int i, Object value) {
		// TODO Auto-generated method stub
		assertValue(i, value);
		propertyAccesses[i].getSetter().set(object, value, null);
	}

	@Override
	public Object[] getPropertyValues(Object object) {
		// TODO Auto-generated method stub
		return Stream.of(propertyAccesses).map(pa -> pa.getGetter().get(object)).toArray();
	}

	@Override
	public Object getPropertyValue(Object object, int i) throws HibernateException {
		// TODO Auto-generated method stub
		assertIndex(i);
		return propertyAccesses[i].getGetter().get(object);
	}

	@Override
	public Object getPropertyValue(Object object, String propertyName) {
		// TODO Auto-generated method stub
		return getPropertyValue(object, indexMap.get(propertyName));
	}

	@Override
	public Serializable getIdentifier(Object object) throws HibernateException {
		// TODO Auto-generated method stub
		if (canExtractIdOutOfEntity()) {
			return (Serializable) identifierAccess.getGetter().get(object);
		}

		throw new HibernateException(String.format("%s Can not extract id out of entity", entityName));
	}

	@Override
	public Serializable getIdentifier(Object entity, SharedSessionContractImplementor session) {
		// TODO Auto-generated method stub
		return getIdentifier(entity);
	}

	private void assertIdValue(Serializable id) {
		Assert.isTrue(
				id.getClass() == getIdentifierType().getReturnedClass()
						|| id.getClass().isAssignableFrom(getIdentifierType().getReturnedClass()),
				"Id input and returned class must match");
	}

	@Override
	public void setIdentifier(Object entity, Serializable id, SharedSessionContractImplementor session) {
		// TODO Auto-generated method stub
		assertIdValue(id);
		identifierAccess.getSetter().set(entity, id, null);
	}

	@Override
	public Object getVersion(Object object) throws HibernateException {
		// TODO Auto-generated method stub
		return propertyAccesses[getVersionProperty()].getGetter().get(object);
	}

	@Override
	public Object instantiate(Serializable id, SharedSessionContractImplementor session) {
		// TODO Auto-generated method stub
		return instantiator.instantiate(id);
	}

	@Override
	public boolean isInstance(Object object) {
		// TODO Auto-generated method stub
		return instantiator.isInstance(object);
	}

	@Override
	public boolean hasUninitializedLazyProperties(Object object) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void resetIdentifier(Object entity, Serializable currentId, Object currentVersion,
			SharedSessionContractImplementor session) {
		// TODO Auto-generated method stub
	}

	@SuppressWarnings("unchecked")
	@Override
	public EntityTuplizerImplementor<D> getEntityTuplizer() {
		// TODO Auto-generated method stub
		return this.unwrap(EntityTuplizerImplementor.class);
	}

	@Override
	public BytecodeEnhancementMetadata getInstrumentationMetadata() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public FilterAliasGenerator getFilterAliasGenerator(String rootAlias) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public int[] resolveAttributeIndexes(String[] attributeNames) {
		// TODO Auto-generated method stub
		Assert.isTrue(attributeNames.length <= propertySpan, "Property span exceeded");
		int[] arr = new int[attributeNames.length];
		int i = 0;

		for (String name : attributeNames) {
			arr[i++] = Optional.ofNullable(indexMap.get(name)).orElseThrow();
		}

		return arr;
	}

	@Override
	public EntityIdentifierDefinition getEntityKeyDefinition() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Iterable<AttributeDefinition> getAttributes() {
		// TODO Auto-generated method stub
		return null;
	}

	@SuppressWarnings("unchecked")
	@Override
	public ResourcePersister<D> getSubclassEntityPersister(Object instance, SessionFactoryImplementor factory) {
		// TODO Auto-generated method stub
		return (ResourcePersister<D>) metamodel.getSubclassNames().stream()
				.map(name -> managerFactory.getMetamodel().entityPersister(name))
				.filter(persister -> persister.isInstance(factory)).findFirst().orElse(null);
	}

	@Override
	public ResourcePersister<D> getEntityPersister() {
		// TODO Auto-generated method stub
		return this;
	}

	@Override
	public ResourceManagerFactory getManagerFactory() {
		// TODO Auto-generated method stub
		return managerFactory;
	}

	@Override
	public boolean hasSubclasses() {
		// TODO Auto-generated method stub
		return metamodel.hasSubclasses();
	}

	@Override
	public void setPropertyValue(Object object, String propertyName, Object value) throws HibernateException {
		// TODO Auto-generated method stub
		setPropertyValue(object, indexMap.get(propertyName), value);
	}

	@SuppressWarnings("unchecked")
	@Override
	public <E> E unwrap(Class<E> type) {
		// TODO Auto-generated method stub
		return (E) this;
	}

	@Override
	public String toString() {
		// @formatter:off
		return String.format("Metamodel: %s\n"
				+ "\t-propertySpan: %d\n"
				+ "\t-indexMap: [%s]\n"
				+ "\t-valueGenerations: [%s]\n"
				+ "\t-propertyNullabilities: [%s]\n"
				+ "\t-propertyUpdatabilities: [%s]\n"
				+ "\t-propertyTypes: [%s]\n"
				+ "\t-getters: [%s]\n"
				+ "\t-setters: [%s]\n"
				+ "\t-autoGeneratedMarkers: [%s]\n"
				+ "\t-identifierGenerator: %s\n"
				+ "\t-superType: %s\n"
				+ "\t-declaredAttributes: \n%s\n"
				+ "\t-declaredSingularAttributes: \n%s\n"
				+ "\t-declaredPluralAttributes: \n%s\n"
				+ "\t-hasIdentifierProperty: %b\n"
				+ "\t-hasIdClass: %b\n"
				+ "\t-id: %s\n"
				+ "\t-idClassAttributes(in size): %d\n"
				+ "\t-isVersioned: %b\n"
				+ "\t-versionAttribute: %s\n"
				+ "\t-subclassNames: %s",
				getEntityName(),
				propertySpan,
				indexMap.entrySet().stream().sorted((l, r) -> Integer.compare(l.getValue(), r.getValue())).map(ele -> ele.getValue() + "|" + ele.getKey()).collect(Collectors.joining(", ")),
				Stream.of(valueGenerations)
					.map(ele -> {
						if (ele instanceof IdentifierGenerationHolder) {
							return "Determined by IdentifierGenerator|Generated by IdentifierGenerator";
						}
						
						return ele.getGenerationTiming() + "|" + (ele.getValueGenerator() != null ? ele.getValueGenerator().getClass().getName() : "NULL");
					})
					.collect(Collectors.joining(", ")),
				IntStream.range(0, propertySpan)
					.mapToObj(index -> String.valueOf(propertyNullabilities[index]))
					.collect(Collectors.joining(", ")),
				IntStream.range(0, propertySpan)
					.mapToObj(index -> String.valueOf(propertyUpdatabilities[index]))
					.collect(Collectors.joining(", ")),
				Stream.of(propertyTypes)
					.map(ele -> ele.getName())
					.collect(Collectors.joining(", ")),
				Stream.of(propertyAccesses)
					.map(pa -> pa.getGetter().getMethod().getName())
					.collect(Collectors.joining(", ")),
				Stream.of(propertyAccesses)
					.map(pa -> pa.getSetter().getMethod().getName())
					.collect(Collectors.joining(", ")),	
				IntStream.range(0, propertySpan)
					.mapToObj(index -> String.valueOf(autoGeneratedMarkers[index]))
					.collect(Collectors.joining(", ")),
				identifierGenerator != null ? identifierGenerator.getClass().getName() : "NULL",
				metamodel.getSupertype() != null ? metamodel.getSupertype().getName() : "NULL",
				metamodel.getDeclaredAttributes().stream().map(ele -> String.format("\t\t-name: %s\n"
						+ "\t\t-persistentAttributeType: %s\n"
						+ "\t\t-declaringType: %s\n"
						+ "\t\t-javaMember: %s\n"
						+ "\t\t-isAssociation: %b\n"
						+ "\t\t-isCollection: %b",
						ele.getName(),
						ele.getPersistentAttributeType(),
						ele.getDeclaringType().getJavaType(),
						ele.getJavaMember().getName(),
						ele.isAssociation(),
						ele.isCollection())).collect(Collectors.joining("\n\t\t--------------------\n")),
				metamodel.getDeclaredSingularAttributes().stream().map(ele -> String.format("\t\t-name: %s\n"
						+ "\t\t-isId: %b\n"
						+ "\t\t-isVersion: %b\n"
						+ "\t\t-isOptional: %b", 
						ele.getName(),
						ele.isId(),
						ele.isVersion(),
						ele.isOptional())).collect(Collectors.joining("\n\t\t--------------------\n")),
				metamodel.getDeclaredPluralAttributes().stream().map(ele -> String.format("\t\t-name: %s\n"
						+ "\t\t-collectionType: %s\n"
						+ "\t\t-elementType: %s\n",
						ele.getName(),
						ele.getCollectionType(),
						ele.getElementType().getJavaType().getName())).collect(Collectors.joining("\n\t\t--------------------\n")),
				metamodel.hasSingleIdAttribute(),
				metamodel.hasIdClass(),
				metamodel.hasSingleIdAttribute() ? metamodel.getId(metamodel.getIdType().getJavaType()).getName() + ": " + metamodel.getId(metamodel.getIdType().getJavaType()).getJavaType().getName() : "NULL",
				metamodel.hasIdClass() ? metamodel.getIdClassAttributes().size() : 0,
				metamodel.hasVersionAttribute(),
				metamodel.hasVersionAttribute() ? metamodel.getDeclaredVersion().getName() + ": " + metamodel.getDeclaredVersion().getJavaType().getName() : "NULL",
				metamodel.getSubclassNames().stream().collect(Collectors.joining(", ")));
		// @formatter:on
	}

	@Override
	public PropertyAccess getPropertyAccess(String propertyName) {
		// TODO Auto-generated method stub
		return propertyAccesses[indexMap.get(propertyName)];
	}

	@Override
	public PropertyAccess getPropertyAccess(int propertyIndex) {
		// TODO Auto-generated method stub
		return propertyAccesses[propertyIndex];
	}

	@Override
	public PropertyAccess locatePropertyAccess(String propertyName) {
		PropertyAccess candidate = getPropertyAccess(propertyName);

		if (candidate != null) {
			return candidate;
		}

		return managerFactory.getMetamodel().entityPersister(metamodel.locateSuperType().getName())
				.locatePropertyAccess(propertyName);
	}

	@Override
	public ValueGeneration getValueGeneration(int propertyIndex) {
		// TODO Auto-generated method stub
		return valueGenerations[propertyIndex];
	}

	@Override
	public ValueGeneration getValueGeneration(String propertyName) {
		// TODO Auto-generated method stub
		return valueGenerations[indexMap.get(propertyName)];
	}

	@Override
	public ValueGeneration locateValueGeneration(String propertyName) {
		// TODO Auto-generated method stub
		ValueGeneration candidate = getValueGeneration(propertyName);

		if (candidate != null) {
			return candidate;
		}

		return managerFactory.getMetamodel().entityPersister(metamodel.locateSuperType().getName())
				.locateValueGeneration(propertyName);
	}

	@Override
	public String getRootTableName() {
		// TODO Auto-generated method stub
		return metamodel.locateRootType().getName();
	}

	@Override
	public String getRootTableAlias(String drivingAlias) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String[] getRootTableIdentifierColumnNames() {
		// TODO Auto-generated method stub
		return new String[] { metamodel.locateRootType().locateIdAttribute().getName() };
	}

	@Override
	public String getVersionColumnName() {
		// TODO Auto-generated method stub
		if (!isVersioned()) {
			return null;
		}

		return getPropertyNames()[getVersionProperty()];
	}

	@Override
	public Type getDiscriminatorType() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Object getDiscriminatorValue() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String getSubclassForDiscriminatorValue(Object value) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String[] getIdentifierColumnNames() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String[] getIdentifierAliases(String suffix) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String[] getPropertyAliases(String suffix, int i) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String[] getPropertyColumnNames(int i) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String getDiscriminatorAlias(String suffix) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String getDiscriminatorColumnName() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean hasRowId() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public Object[] hydrate(ResultSet rs, Serializable id, Object row, Loadable rootLoadable,
			String[][] suffixedPropertyColumns, boolean allProperties, SharedSessionContractImplementor session)
			throws SQLException, HibernateException {
		// TODO Auto-generated method stub
		logger.debug(String.format("[Row-Hydrate] Row type: %s", row.getClass()));
		
		Type[] types = getPropertyTypes();
		int n = types.length;
		Object[] values = new Object[n];

		for (int i = 0; i < n; i++) {
			Object value;

			values[i] = (value = getPropertyAccess(i).getGetter().get(row));

			if (value == null && !getPropertyNullability()[i]) {
				throw new HibernateException(
						String.format("Null property value found on %s.%s", getEntityName(), getPropertyNames()[i]));
			}

			if (!types[i].getReturnedClass().equals(value.getClass())) {
				if (!value.getClass().isAssignableFrom(types[i].getReturnedClass())) {
					throw new HibernateException(String.format(
							"Unable to hydrate property %s.%s. Type mismatch [%s><%s]", getEntityName(),
							getPropertyNames()[i], types[i].getReturnedClass().getName(), value.getClass().getName()));
				}
			}
		}

		return values;
	}

	@Override
	public boolean isAbstract() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public void registerAffectingFetchProfile(String fetchProfileName) {
		// TODO Auto-generated method stub

	}

	@Override
	public String getTableAliasForColumn(String columnName, String rootAlias) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public void hydrate(Object[] hydratedValues, Object instance) {
		// TODO Auto-generated method stub
		setPropertyValues(instance, hydratedValues);
	}

}
