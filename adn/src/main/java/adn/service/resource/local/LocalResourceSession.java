/**
 * 
 */
package adn.service.resource.local;

import java.io.Serializable;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;
import org.springframework.util.Assert;
import org.springframework.web.context.annotation.RequestScope;

/**
 * @author Ngoc Huy
 *
 */
@Component
@RequestScope
@Lazy
public class ResourceManagerImpl implements ResourceManager {

	private final ResourceContext context;

	private final ResourceManagerFactory resourceManagerFactory;

	/**
	 * 
	 */
	@Autowired
	public ResourceManagerImpl(ResourceManagerFactory resourceManagerFactory) {
		// TODO Auto-generated constructor stub
		this.resourceManagerFactory = resourceManagerFactory;
		context = createResourceContext();
	}

	private ResourceContext createResourceContext() {
		return new ResourceContextImpl(this);
	}

	@Override
	public ResourceManagerFactory getResourceManagerFactory() {
		// TODO Auto-generated method stub
		return resourceManagerFactory;
	}

	@Override
	public <T> void manage(T instance, Class<T> type) {
		// TODO Auto-generated method stub
		ResourceDescriptor<T> descriptor = locateResourceDescriptor(type);
		Object identifier = descriptor.getIdentifier(instance);

		if (identifier == null) {
			Assert.isTrue(descriptor.isIdentifierAutoGenerated(),
					"Unable to locate identifier value of resource, resource type: " + type.getName());
			identifier = (Serializable) descriptor.getIdentifierValueGeneration().getValueGenerator()
					.generateValue(getResourceManagerFactory(), instance);
			descriptor.getIdentifierSetter().set(instance, identifier, null);
		}

		context.add((Serializable) identifier, instance);
	}

	@SuppressWarnings("unchecked")
	@Override
	public <T> T find(Serializable identifier, Class<T> type) {
		// TODO Auto-generated method stub
		Object candidate = context.contains(identifier) ? context.find(identifier) : null;

		if (candidate.getClass().equals(type) || type.isAssignableFrom(candidate.getClass())) {
			return (T) candidate;
		}

		return null;
	}

	private <T> ResourceDescriptor<T> locateResourceDescriptor(Class<T> type) {
		supportCheck(type);

		return getResourceManagerFactory().getResourceDescriptor(type);
	}

	private <T> void supportCheck(Class<T> type) throws IllegalArgumentException {
		ResourceDescriptor<T> descriptor = getResourceManagerFactory().getResourceDescriptor(type);

		Assert.notNull(descriptor, "Could not obtain descriptor for resource of type: " + type
				+ ", provided resource type is not a managed type");
		Assert.isTrue(descriptor.isInstance(type), "Type check failed. Denied by: " + descriptor.getClass().getName());
	}

}
