/**
 * 
 */
package adn.service.resource.event;

import java.io.Serializable;
import java.lang.reflect.Array;
import java.util.function.Consumer;

import org.hibernate.event.internal.EntityState;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import adn.service.resource.local.ResourceDescriptor;

/**
 * @author Ngoc Huy
 *
 */
public class PersistEventExecutor<T> implements EventExecutor<T, PersistentEvent<T>> {

	public static PersistEventExecutor<?> INSTANCE = new PersistEventExecutor<>();

	private final Logger logger = LoggerFactory.getLogger(this.getClass());

	@SuppressWarnings("unchecked")
	private final Consumer<PersistentEvent<T>>[] STRATEGIES = (Consumer<PersistentEvent<T>>[]) Array
			.newInstance(PersistentEvent.class, 4);

	private PersistEventExecutor() {
		STRATEGIES[EntityState.TRANSIENT.ordinal()] = this::executeWhenTransient;
		STRATEGIES[EntityState.DELETED.ordinal()] = this::executeWhenDeleted;
		STRATEGIES[EntityState.DETACHED.ordinal()] = this::executeWhenDetached;
		STRATEGIES[EntityState.PERSISTENT.ordinal()] = this::executeWhenPersistent;
	}

	@Override
	public void execute(PersistentEvent<T> event) {
		// TODO Auto-generated method stub
		T instance;
//		ResourceEntry<T> entry = event.getResourceManager().getResourceContext()
//				.getEntry(instance = event.getInstance());
//		EntityState state = getEntityState(entry, instance, event.getResourceDescriptor());

//		STRATEGIES[state.ordinal()].accept(event);
	}

	private void executeWhenPersistent(PersistentEvent<T> event) {
		logger.trace("Ignoring persistent resource");
	}

	private void executeWhenTransient(PersistentEvent<T> event) {
		ResourceDescriptor<T> descriptor = event.getResourceDescriptor();

		logger.trace("Managing resource of type: " + descriptor.getResourceName());

		T instance;
		Serializable identifier = descriptor.getIdentifier(instance = event.getInstance());

		if (descriptor.isIdentifierAutoGenerated()) {
//			descriptor.setIdentifier(instance,
//					identifier = descriptor.getIdentifierValueGeneration().getValueGenerator()
//							.generateValue(event.getResourceManager().getResourceManagerFactory(), instance));
		}

//		event.getResourceManager().getResourceContext().addResource(instance, Status.MANAGED, LockMode.READ,
//				new ResourceKey<>(identifier, descriptor), descriptor);
	}

	private void executeWhenDetached(PersistentEvent<T> event) {
		ResourceDescriptor<T> descriptor = event.getResourceDescriptor();
		T instance;

		logger.trace("Managing DETACHED resource");
//		event.getResourceManager().getResourceContext().addResource(instance = event.getInstance(), Status.MANAGED,
//				LockMode.READ, new ResourceKey<>(descriptor.getIdentifier(instance), descriptor), descriptor);
	}

	private void executeWhenDeleted(PersistentEvent<T> event) {
		logger.trace("Removing DELETE-ACTION from ActionQueue");
		event.getResourceManager().getActionQueue();
	}

}
