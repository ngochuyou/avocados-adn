/**
 * 
 */
package adn.service.resource.metamodel;

import static adn.service.resource.local.ResourceManagerFactory.unsupport;

import java.util.HashMap;
import java.util.Map;

import org.hibernate.graph.spi.SubGraphImplementor;
import org.hibernate.metamodel.model.domain.internal.AbstractIdentifiableType;
import org.hibernate.metamodel.model.domain.spi.EntityTypeDescriptor;
import org.hibernate.metamodel.model.domain.spi.IdentifiableTypeDescriptor;
import org.hibernate.property.access.spi.Getter;
import org.hibernate.property.access.spi.Setter;
import org.hibernate.tuple.ValueGeneration;

/**
 * @author Ngoc Huy
 *
 */
@SuppressWarnings("serial")
public class EntityTypeImpl<D> extends AbstractIdentifiableType<D> implements EntityTypeDescriptor<D> {

//	private final Map<String, PersistentAttribute<D, ?>> attributeMap = new HashMap<>();
//	private final Map<String, SingularPersistentAttribute<D, ?>> singularAttributeMap = new HashMap<>();
//	private final Map<String, PluralPersistentAttribute<D, ? extends Collection<?>, ?>> pluralAttributeMap = new HashMap<>();

	private int propertySpan;
	private final Map<String, Integer> indexMap = new HashMap<>();
	private ValueGeneration[] valueGenerations;
	private Class<?>[] propertyTypes;
	private Getter[] getters;
	private Setter[] setters;
	private boolean[] autoGeneratedMarkers;

	private Getter idGetter;
	private Setter idSetter;
	private ValueGeneration identifierValueGeneration;

	// @formatter:off
	public EntityTypeImpl(
		Class<D> entityType,
		String entityName,
		ResourceClass<D> typeClass, 
		IdentifiableTypeDescriptor<? super D> superType) {
		super(
				entityType,
				entityName,
				superType,
				false,
				typeClass.hasIdentifier(),
				typeClass.isVersioned(),
				null
		);
	}
	// @formatter:on

	@Override
	public PersistenceType getPersistenceType() {
		// TODO Auto-generated method stub
		return PersistenceType.ENTITY;
	}

//	@Override
//	public Set<Attribute<? super D, ?>> getAttributes() {
//		// TODO Auto-generated method stub
//		if (getSupertype() != null) {
//			Set<Attribute<? super D, ?>> attributes = new HashSet<>(getSupertype().getAttributes());
//
//			attributes.addAll(getDeclaredAttributes());
//
//			return Collections.unmodifiableSet(attributes);
//		}
//
//		return Collections.unmodifiableSet(getDeclaredAttributes());
//	}
//
//	@Override
//	public Set<Attribute<D, ?>> getDeclaredAttributes() {
//		// TODO Auto-generated method stub
//		return Collections.unmodifiableSet(super.getDeclaredAttributes());
//	}

//	@Override
//	public Set<SingularAttribute<? super D, ?>> getSingularAttributes() {
//		// TODO Auto-generated method stub
//		if (getSupertype() != null) {
//			Set<SingularAttribute<? super D, ?>> singulars = new HashSet<>(getSupertype().getSingularAttributes());
//
//			singulars.addAll(getDeclaredSingularAttributes());
//
//			return Collections.unmodifiableSet(singulars);
//		}
//
//		return Collections.unmodifiableSet(getDeclaredSingularAttributes());
//	}

//	@Override
//	public Set<SingularAttribute<D, ?>> getDeclaredSingularAttributes() {
//		// TODO Auto-generated method stub
//		return Collections.unmodifiableSet(super.getDeclaredSingularAttributes());
//	}

//	@SuppressWarnings("unchecked")
//	private <T, G, A extends PluralAttribute<D, T, G>> A locatePluralAttribute(String name, Class<A> attributeType,
//			Class<T> collectionType, Class<G> elementType) {
//		// @formatter:off
//		A candidate = (A) pluralAttributeMap
//				.values().stream()
//				.filter(attr -> attr.getClass().equals(attributeType)
//						&& attr.getJavaType().equals(collectionType)
//						&& ( attr.getElementType().getJavaType().equals(elementType)
//								|| elementType.isAssignableFrom(attr.getElementType().getJavaType()))
//						&& attr.getName() == name)
//				.findFirst().orElse(null);
//		// @formatter:on
//		return candidate;
//	}

//	@Override
//	@SuppressWarnings("unchecked")
//	public <E> CollectionAttribute<D, E> getDeclaredCollection(String name, Class<E> elementType) {
//		// TODO Auto-generated method stub
//		return locatePluralAttribute(name, CollectionAttribute.class, Collection.class, elementType);
//	}

//	@Override
//	public <E> SetAttribute<? super D, E> getSet(String name, Class<E> elementType) {
//		// TODO Auto-generated method stub
//		SetAttribute<? super D, E> candidate = getDeclaredSet(name, elementType);
//
//		if (candidate == null && getSuperType() != null) {
//			return getSupertype().getSet(name, elementType);
//		}
//
//		return candidate;
//	}
//
//	@Override
//	@SuppressWarnings("unchecked")
//	public <E> SetAttribute<D, E> getDeclaredSet(String name, Class<E> elementType) {
//		// TODO Auto-generated method stub
//		return locatePluralAttribute(name, SetAttribute.class, Set.class, elementType);
//	}
//
//	@Override
//	public <E> ListAttribute<? super D, E> getList(String name, Class<E> elementType) {
//		// TODO Auto-generated method stub
//		ListAttribute<? super D, E> candidate = getDeclaredList(name, elementType);
//
//		if (candidate == null && getSupertype() != null) {
//			return getSupertype().getList(name, elementType);
//		}
//
//		return candidate;
//	}
//
//	@Override
//	@SuppressWarnings("unchecked")
//	public <E> ListAttribute<D, E> getDeclaredList(String name, Class<E> elementType) {
//		// TODO Auto-generated method stub
//		return locatePluralAttribute(name, ListAttribute.class, List.class, elementType);
//	}
//
//	@SuppressWarnings("unchecked")
//	private <K, G> MapAttribute<D, K, G> locateMapAttribute(String name, Class<K> keyType, Class<G> elementType) {
//		MapAttribute<D, ?, G> candidate = locatePluralAttribute(name, MapAttribute.class, Map.class, elementType);
//
//		if (candidate.getKeyType().getJavaType().equals(keyType)) {
//			return (MapAttribute<D, K, G>) candidate;
//		}
//
//		return null;
//	}
//
//	@Override
//	public <K, V> MapAttribute<? super D, K, V> getMap(String name, Class<K> keyType, Class<V> valueType) {
//		// TODO Auto-generated method stub
//		MapAttribute<? super D, K, V> candidate = getDeclaredMap(name, keyType, valueType);
//
//		if (candidate == null && getSupertype() != null) {
//			return getSupertype().getMap(name, keyType, valueType);
//		}
//
//		return candidate;
//	}
//
//	@Override
//	public <K, V> MapAttribute<D, K, V> getDeclaredMap(String name, Class<K> keyType, Class<V> valueType) {
//		// TODO Auto-generated method stub
//		return locateMapAttribute(name, keyType, valueType);
//	}
//
//	@Override
//	public Set<PluralAttribute<? super D, ?, ?>> getPluralAttributes() {
//		// TODO Auto-generated method stub
//		if (getSupertype() != null) {
//			Set<PluralAttribute<? super D, ?, ?>> candidates = new HashSet<>(getSupertype().getPluralAttributes());
//
//			candidates.addAll(getDeclaredPluralAttributes());
//
//			return Collections.unmodifiableSet(candidates);
//		}
//
//		return Collections.unmodifiableSet(getDeclaredPluralAttributes());
//	}
//
//	@Override
//	public Set<PluralAttribute<D, ?, ?>> getDeclaredPluralAttributes() {
//		// TODO Auto-generated method stub
//		return Collections.unmodifiableSet(new HashSet<>(pluralAttributeMap.values()));
//	}
//
//	@Override
//	public SingularAttribute<? super D, ?> getSingularAttribute(String name) {
//		// TODO Auto-generated method stub
//		return singularAttributeMap.get(name);
//	}
//
//	@Override
//	public SingularAttribute<D, ?> getDeclaredSingularAttribute(String name) {
//		// TODO Auto-generated method stub
//		return singularAttributeMap.get(name);
//	}
//
//	@Override
//	public CollectionAttribute<? super D, ?> getCollection(String name) {
//		// TODO Auto-generated method stub
//		CollectionAttribute<? super D, ?> candidate = getDeclaredCollection(name);
//
//		if (candidate == null && getSupertype() != null) {
//			candidate = getSupertype().getCollection(name);
//		}
//
//		return candidate;
//	}
//
//	@SuppressWarnings("unchecked")
//	@Override
//	public CollectionAttribute<D, ?> getDeclaredCollection(String name) {
//		// TODO Auto-generated method stub
//		return locatePluralAttribute(name, CollectionAttribute.class, Collection.class, Object.class);
//	}

	@Override
	public boolean hasSingleIdAttribute() {
		// TODO Auto-generated method stub
		return !super.hasIdClass();
	}

//	@Override
//	public boolean hasVersionAttribute() {
//		// TODO Auto-generated method stub
//		return version != null;
//	}

	@Override
	public BindableType getBindableType() {
		// TODO Auto-generated method stub
		return BindableType.ENTITY_TYPE;
	}

	@Override
	public Class<D> getBindableJavaType() {
		// TODO Auto-generated method stub
		return getJavaType();
	}

	public Class<?> getPropertyType(String propertyName) {
		return propertyTypes[indexMap.get(propertyName)];
	}

	public Getter[] getGetters() {
		return getters;
	}

	public Setter[] getSetters() {
		return setters;
	}

	public Getter getGetter(String propertyName) {
		return getters[indexMap.get(propertyName)];
	}

	public Setter getSetter(String propertyName) {
		return setters[indexMap.get(propertyName)];
	}

	public Getter getIdGetter() {
		return idGetter;
	}

	public Setter getIdSetter() {
		return idSetter;
	}

	public ValueGeneration getIdValueGeneration() {
		return identifierValueGeneration;
	}

	public int getPropertySpan() {
		return propertySpan;
	}

	public boolean[] getAutoGeneratedMarkers() {
		return autoGeneratedMarkers;
	}

	public int getPropertyIndex(String propertyName) {
		return indexMap.get(propertyName);
	}

	public ValueGeneration getPropertyValueGeneration(String propertyName) {
		return valueGenerations[indexMap.get(propertyName)];
	}

	@Override
	public <S extends D> SubGraphImplementor<S> makeSubGraph(Class<S> subType) {
		// TODO Auto-generated method stub
		unsupport();
		return null;
	}

	@Override
	public SubGraphImplementor<D> makeSubGraph() {
		// TODO Auto-generated method stub
		unsupport();
		return null;
	}

}
