/**
 * 
 */
package adn.service.resource.metamodel;

import java.lang.reflect.Field;
import java.lang.reflect.ParameterizedType;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;
import java.util.stream.Stream;

import javax.persistence.Column;
import javax.persistence.Id;
import javax.persistence.PersistenceException;
import javax.persistence.metamodel.Attribute.PersistentAttributeType;
import javax.persistence.metamodel.EmbeddableType;
import javax.persistence.metamodel.EntityType;
import javax.persistence.metamodel.ManagedType;

import org.hibernate.mapping.Property;
import org.hibernate.metamodel.model.domain.internal.BasicTypeImpl;
import org.hibernate.metamodel.model.domain.internal.PluralAttributeBuilder;
import org.hibernate.metamodel.model.domain.internal.SingularAttributeImpl;
import org.hibernate.metamodel.model.domain.internal.SingularAttributeImpl.Identifier;
import org.hibernate.metamodel.model.domain.internal.SingularAttributeImpl.Version;
import org.hibernate.metamodel.model.domain.spi.BasicTypeDescriptor;
import org.hibernate.metamodel.model.domain.spi.PluralPersistentAttribute;
import org.hibernate.metamodel.model.domain.spi.SingularPersistentAttribute;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.util.Assert;

import adn.service.resource.local.ContextBuildingService;
import adn.service.resource.local.Metadata;
import adn.service.resource.local.NamingStrategy;
import adn.service.resource.local.ResourceDescriptor;
import adn.service.resource.local.ResourceManagerFactory;

/**
 * @author Ngoc Huy
 *
 */
public class MetamodelImpl implements Metamodel {

	private static final Logger logger = LoggerFactory.getLogger(MetamodelImpl.class);

	private final ResourceManagerFactory managerFactory;

	private final Map<String, EntityType<?>> entitiesByName;
	private final Map<String, ResourceDescriptor<?>> descriptorsByName;

	/**
	 * @throws SecurityException
	 * @throws NoSuchMethodException
	 * @throws NoSuchFieldException
	 * 
	 */
	public MetamodelImpl(ContextBuildingService serviceRegistry, ResourceManagerFactory resourceManagerFactory) {
		// TODO Auto-generated constructor stub
		Assert.notNull(resourceManagerFactory, "ResourceManagerFactory must not be null");
		this.managerFactory = resourceManagerFactory;
		this.entitiesByName = new HashMap<>();
		this.descriptorsByName = new HashMap<>();
	}

	@Override
	public <X> EntityTypeImpl<X> entity(Class<X> cls) {
		// TODO Auto-generated method stub
		return entity(managerFactory.getContextBuildingService().getService(NamingStrategy.class).getName(cls));
	}

	@SuppressWarnings("unchecked")
	public <X> EntityTypeImpl<X> entity(String name) {
		// TODO Auto-generated method stub
		return (EntityTypeImpl<X>) entitiesByName.get(name);
	}

	@Override
	public <X> ManagedType<X> managedType(Class<X> cls) {
		// TODO Auto-generated method stub
		return entity(cls);
	}

	@Override
	public <X> EmbeddableType<X> embeddable(Class<X> cls) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Set<ManagedType<?>> getManagedTypes() {
		// TODO Auto-generated method stub
		return Collections.unmodifiableSet(new HashSet<>(entitiesByName.values()));
	}

	@Override
	public Set<EntityType<?>> getEntities() {
		// TODO Auto-generated method stub
		return Collections.unmodifiableSet(new HashSet<>(entitiesByName.values()));
	}

	@Override
	public Set<EmbeddableType<?>> getEmbeddables() {
		// TODO Auto-generated method stub
		return Collections.emptySet();
	}

	@SuppressWarnings("unchecked")
	public <T> ResourceDescriptor<T> getResourceDescriptor(String resourceName) {
		// TODO Auto-generated method stub
		if (!descriptorsByName.keySet().contains(resourceName)) {
			return null;
		}

		return (ResourceDescriptor<T>) descriptorsByName.get(resourceName);
	}

	public Set<ResourceDescriptor<?>> getResourceDescriptors() {
		// TODO Auto-generated method stub
		return Collections.unmodifiableSet(new HashSet<>(descriptorsByName.values()));
	}

	public ResourceManagerFactory getManagerFactory() {
		return managerFactory;
	}

	@Override
	public String toString() {
		// TODO Auto-generated method stub
		for (ResourceDescriptor<?> descriptor : descriptorsByName.values()) {
			// @formatter:off
			logger.debug(String.format("\nCreated descriptor for type: %s with name: %s\n"
					+ "\t-idGetter: %s returns %s\n"
					+ "\t-idSetter: %s returns void\n"
					+ "\t-isIdentifierAutoGenerated: %s\n"
					+ "\t-identifierValueGenerator: %s\n"
					+ "\t-generationTiming: %s",
					descriptor.getType(), descriptor.getResourceName(),
					descriptor.getIdentifierGetter().getMethodName(), descriptor.getIdentifierGetter().getReturnType(),
					descriptor.getIdentifierSetter().getMethodName(),
					Boolean.valueOf(descriptor.isIdentifierAutoGenerated()),
					(descriptor.isIdentifierAutoGenerated() ? 
							descriptor.getIdentifierValueGeneration().getValueGenerator().getClass().getName() :
							"NONE"),
					(descriptor.isIdentifierAutoGenerated() ? 
							descriptor.getIdentifierValueGeneration().getGenerationTiming() :
							"NEVER")));
			logger.trace(descriptor.toString());
		}
		// @formatter:on
		return super.toString();
	}

	@Override
	public void prepare() throws PersistenceException {
		// TODO Auto-generated method stub
	}

	@Override
	public void process() throws PersistenceException {
		// TODO Auto-generated method stub
		ContextBuildingService contextService = managerFactory.getContextBuildingService();
		Metadata metadata = contextService.getService(Metadata.class);
		Map<String, Class<?>> imports = metadata.getImports();
		ModelProcessor processor = new ModelProcessor();

		for (String name : imports.keySet()) {
			entitiesByName.put(name, processor.processModel(name, imports.get(name), metadata));
		}
	}

	@Override
	public void postProcess() throws PersistenceException {
		// TODO Auto-generated method stub
	}

	@SuppressWarnings("unchecked")
	private static class AttributeFactory {

		static volatile Map<String, BasicTypeDescriptor<?>> typeContainer = new ConcurrentHashMap<>();

		private static AttributeFactory INSTANCE = new AttributeFactory();

		static <D, T> SingularPersistentAttribute<D, T> createIdentifier(EntityTypeImpl<D> owner, Field f) {
			// TODO Auto-generated method stub
			return new Identifier<>(owner, f.getName(), INSTANCE.resolveBasicType((Class<T>) f.getType()), f,
					PersistentAttributeType.BASIC);
		}

		static <D, T> SingularPersistentAttribute<D, T> createVersion(EntityTypeImpl<D> owner, Field f) {
			return new Version<>(owner, f.getName(), PersistentAttributeType.BASIC,
					INSTANCE.resolveBasicType((Class<T>) f.getType()), f);
		}

		static <D, T> SingularPersistentAttribute<D, T> createSingularAttribute(EntityTypeImpl<D> owner, Field f,
				boolean isOptional) {
			return new SingularAttributeImpl<>(owner, f.getName(), PersistentAttributeType.BASIC,
					INSTANCE.resolveBasicType((Class<T>) f.getType()), f, false, false, isOptional);
		}

		static <D, C, E> PluralPersistentAttribute<D, C, E> createPluralAttribute(EntityTypeImpl<D> owner, Field f) {
			if (!Collection.class.isAssignableFrom(f.getType())) {
				throw new IllegalArgumentException("PluralAttribute describes Collection property only");
			}

			Class<C> collectionType = (Class<C>) f.getType();
			PluralAttributeBuilder<D, C, E, ?> builder;

			if (collectionType.equals(Map.class)) {
				KeyValueContext<E, ?> kvPair = INSTANCE.determineMapGenericType(f);

				builder = new PluralAttributeBuilder<>(owner, INSTANCE.resolveBasicType(kvPair.keyType), collectionType,
						INSTANCE.resolveBasicType(kvPair.valueType));
			} else {
				builder = new PluralAttributeBuilder<>(owner,
						INSTANCE.resolveBasicType(INSTANCE.determineNonMapGenericType(f)), collectionType, null);
			}

			Property prop = new Property();

			prop.setName(f.getName());
			builder.property(prop);

			return builder.build();
		}

		private <K, V> KeyValueContext<K, V> determineMapGenericType(Field f) {
			if (Map.class.isAssignableFrom(f.getType())) {
				throw new IllegalArgumentException("Unable to extract key, value type out of none-Map collection");
			}

			ParameterizedType paramType = (ParameterizedType) f.getGenericType();

			return new KeyValueContext<>((Class<K>) paramType.getActualTypeArguments()[0],
					(Class<V>) paramType.getActualTypeArguments()[1]);
		}

		private <T> Class<T> determineNonMapGenericType(Field f) {
			ParameterizedType paramType = (ParameterizedType) f.getGenericType();

			return (Class<T>) paramType.getActualTypeArguments()[0];
		}

		private String resolveTypeName(Class<?> type) {
			return type.getName();
		}

		private <T> BasicTypeDescriptor<T> resolveBasicType(Class<T> type) {
			String typeName = resolveTypeName(type);

			if (typeContainer.containsKey(typeName)) {
				BasicTypeDescriptor<?> candidate = typeContainer.get(typeName);

				if (candidate.getJavaType().equals(type)) {
					return (BasicTypeDescriptor<T>) candidate;
				}

				throw new IllegalArgumentException(String.format(
						"Unable to locate BasicTypeDescriptor due to type confliction. Required type %s, found type %s",
						type, candidate.getJavaType()));
			}

			return addType(new BasicTypeImpl<>(type, null));
		}

		static <T> BasicTypeDescriptor<T> addType(BasicTypeDescriptor<T> newType) {
			if (typeContainer.containsKey(INSTANCE.resolveTypeName(newType.getJavaType()))) {
				MetamodelImpl.logger.trace(String.format("Ignoring BasicType contribution: [%s, %s]",
						INSTANCE.resolveTypeName(newType.getJavaType()), newType.getJavaType()));

				return newType;
			}

			typeContainer.put(newType.getTypeName(), newType);
			MetamodelImpl.logger.trace(String.format("New BasicType contribution: [%s, %s]",
					INSTANCE.resolveTypeName(newType.getJavaType()), newType.getJavaType()));

			return newType;
		}

		class KeyValueContext<K, V> {

			Class<K> keyType;

			Class<V> valueType;

			public KeyValueContext(Class<K> keyType, Class<V> valueType) {
				super();
				this.keyType = keyType;
				this.valueType = valueType;
			}

		}

	}

	private class ModelProcessor {

		public <J> EntityTypeImpl<J> processModel(String name, Class<J> type, Metadata metadata) {
			if (metadata.isProcessingDone(name)) {
				return entity(type);
			}

			logger.trace(String.format("Processing model. Name: %s. Type: %s", name, type));
			// @formatter:off
			EntityTypeImpl<J> metamodel = new EntityTypeImpl<>(
					type, name,
					isIdentifierPresented(type),
					isVersionPresented(type),
					type.getSuperclass() != null && type.getSuperclass() != Object.class ? processModel(
							metadata.getImports()
								.entrySet().stream()
								.filter(entry -> entry.getValue().equals(type.getSuperclass()))
								.map(entry -> entry.getKey())
								.findFirst().orElseThrow(),
							type.getSuperclass(), metadata) : null);
			// @formatter:on
			processAttributes(metamodel);
			metadata.markedImportAsDone(name);

			return metamodel;
		}

		public <J> void processAttributes(EntityTypeImpl<J> metamodel) {
			Class<J> clazz = metamodel.getJavaType();

			for (Field f : clazz.getDeclaredFields()) {
				final AttributeRole role = AttributeRole.getRole(f);

				switch (role) {
					case IDENTIFIER: {
						logger.trace("Creating IDENTIFIER for type: " + metamodel.getJavaType());
						metamodel.getInFlightAccess().addAttribute(AttributeFactory.createIdentifier(metamodel, f));
						break;
					}
					case VERSION: {
						logger.trace("Creating VERSION for type: " + metamodel.getJavaType());
						metamodel.getInFlightAccess().addAttribute(AttributeFactory.createVersion(metamodel, f));
						break;
					}
					case PROPERTY: {
						if (!isAttributePlural(f)) {
							logger.trace("Creating SingularAttribute for type: " + metamodel.getJavaType());
							metamodel.getInFlightAccess().addAttribute(
									AttributeFactory.createSingularAttribute(metamodel, f, isAttributeOptional(f)));
							break;
						}

						logger.trace("Creating PluralAttribute for type: " + metamodel.getJavaType());
						metamodel.getInFlightAccess()
								.addAttribute(AttributeFactory.createPluralAttribute(metamodel, f));
						break;
					}
				}
			}
		}

		private boolean isAttributeOptional(Field f) {
			Column colAnno = f.getDeclaredAnnotation(Column.class);

			if (colAnno == null) {
				return false;
			}

			return colAnno.nullable();
		}

		private boolean isIdentifierPresented(Class<?> clazz) {
			// @formatter:off
			long n = 0;
			
			return (n = Stream.of(clazz.getDeclaredFields())
					.map(field -> field.getDeclaredAnnotation(Id.class) != null)
					.filter(pred -> pred)
					.count()) < 2 ? n == 1 : rejectModel("More than one Identifier were found on type: " + clazz);
			// @formatter:on
		}

		private boolean isVersionPresented(Class<?> clazz) {
			// @formatter:off
			long n = 0;
			
			return (n = Stream.of(clazz.getDeclaredFields())
					.map(field -> field.getDeclaredAnnotation(javax.persistence.Version.class) != null)
					.filter(pred -> pred)
					.count()) < 2 ? n == 1 : rejectModel("More than one Version were found on type: " + clazz);
			// @formatter:on
		}

		private <T> T rejectModel(String message) {
			throw new IllegalAccessError(message);
		}

		private boolean isAttributePlural(Field f) {
			return Collection.class.isAssignableFrom(f.getType());
		}

	}

	private static enum AttributeRole {

		IDENTIFIER, VERSION, PROPERTY;

		static AttributeRole getRole(Field f) {
			Id idAnno = f.getDeclaredAnnotation(Id.class);
			javax.persistence.Version versionAnno = f.getDeclaredAnnotation(javax.persistence.Version.class);

			if (idAnno != null && versionAnno != null) {
				throw new IllegalArgumentException("Id and Version conflicted");
			}

			return idAnno != null ? IDENTIFIER : versionAnno != null ? VERSION : PROPERTY;
		}

	}

}
