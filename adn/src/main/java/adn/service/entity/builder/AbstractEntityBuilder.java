/**
 * 
 */
package adn.service.entity.builder;

import java.io.Serializable;

import org.hibernate.persister.entity.EntityPersister;

import adn.helpers.HibernateHelper;
import adn.model.entities.Entity;

/**
 * @author Ngoc Huy
 *
 */
public abstract class AbstractEntityBuilder<T extends Entity> extends AbstractCompositeEntityBuilder<T> {

	protected <E extends T> E mandatoryBuild(E target, E model) {
		return target;
	}

	@Override
	public <E extends T> E buildInsertion(Serializable id, E model) {
		Class<? extends Entity> type = model.getClass();
		// to avoid unique column constraint violation when callers
		// explicitly set an existing id into the model.
		// This will cause the Specification check on name uniqueness to pass
		// while it shouldn't have
		if (HibernateHelper.isIdentifierAutoGeneratedButNotEmbedded(type)) {
			id = null;

			EntityPersister persister = HibernateHelper.getEntityPersister(type);
			// there is a tiny chance that we need the Session here,
			// according to Hibernate documents. Thus null
			persister.setIdentifier(model, null, null);
		}

		return mandatoryBuild(model, model);
	}

	@Override
	public <E extends T> E buildUpdate(Serializable id, E model, E persistence) {
		return mandatoryBuild(persistence, model);
	}

}
