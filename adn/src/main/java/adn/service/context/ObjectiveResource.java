/**
 * 
 */
package adn.service.context;

import java.io.Serializable;

import javax.persistence.PersistenceException;

import org.springframework.util.Assert;

import adn.application.context.ContextProvider;
import adn.utilities.ClassReflector;

/**
 * A resource wrapper in which it wrap an object that is considered shared
 * resource in the application. This resource should have a globally managed
 * identifier, usually generated by the {@link ServiceManager}
 * <p>
 * This class only accept instance of {@link Serializable} interface as it will
 * be serialised for state management
 * </p>
 * 
 * @author Ngoc Huy
 *
 */
public class ObjectiveResource<T extends Serializable> extends Resource {

	private T o;

	private Class<T> clazz;

	private final byte[] serialized;

	/**
	 * @param id
	 */
	@SuppressWarnings("unchecked")
	public ObjectiveResource(T o, String id) throws PersistenceException {
		super(id);
		Assert.notNull(id, "ObjectiveResource identifier cannot be null");
		Assert.notNull(o, "ObjectiveResource target cannot be null");
		// TODO Auto-generated constructor stub
		this.o = o;

		try {
			this.serialized = ContextProvider.getApplicationContext().getBean(ClassReflector.class).serialize(o);
		} catch (Exception e) {
			throw new PersistenceException("Failed to create ObjectiveResource. " + e.getMessage());
		}
		this.clazz = (Class<T>) o.getClass();
	}

	@Override
	Class<T> getResourceType() {
		// TODO Auto-generated method stub
		return clazz;
	}

	public T getO() {
		return o;
	}

	public void setO(T o) {
		this.o = o;
	}

	public Class<T> getClazz() {
		return clazz;
	}

	public void setClazz(Class<T> clazz) {
		this.clazz = clazz;
	}

	public byte[] getSerialized() {
		return serialized;
	}

}
